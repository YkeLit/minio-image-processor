http {
    # 定义日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # 访问日志
    access_log /var/log/nginx/access.log main;
    # 错误日志
    error_log /var/log/nginx/error.log warn;

    server {
        listen 80;
        
        # API 服务代理
        location /api/ {
            proxy_pass http://localhost:9000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # 添加访问日志
            access_log /var/log/nginx/api_access.log main;
            error_log /var/log/nginx/api_error.log warn;
        }

        # 控制台代理
        location /console/ {
            proxy_pass http://localhost:9001/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # 添加访问日志
            access_log /var/log/nginx/console_access.log main;
            error_log /var/log/nginx/console_error.log warn;
        }

        # 图片处理接口
        location /processed/ {
            # 代理到MinIO获取原始图片
            proxy_pass http://localhost:9000/;
            proxy_set_header Host $host;
            
            # 启用图片处理模块
            image_filter resize $arg_width $arg_height;
            image_filter_jpeg_quality 85;
            image_filter_buffer 10M;
            
            # 处理错误响应
            error_page 415 = @empty;
            
            # 添加访问日志
            access_log /var/log/nginx/image_access.log main;
            error_log /var/log/nginx/image_error.log warn;
        }

        location @empty {
            empty_gif;
        }
    }
}
events {
    worker_connections  1024;  # 单个worker进程最大连接数
    use epoll;           # 高性能模式（Linux系统建议）
    accept_mutex on;     # 优化连接分发
}
